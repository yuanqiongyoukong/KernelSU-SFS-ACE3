jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      ksu_version: ${{ steps.set-ksu.outputs.KSUVER  }}
    steps:
    - name: 最大化构建空间 
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 16384
        temp-reserve-mb: 2048 
        swap-size-mb: 8192 
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        
    - name: 缓存 .repo 目录
      id: repo-cache 
      uses: actions/cache@v3 
      with:
        path: kernel_workspace/.repo
        key: ${{ runner.os  }}-repo-${{ env.CPU }}-${{ env.FEIL }}
        restore-keys: |
          ${{ runner.os  }}-repo-${{ env.CPU }}-
          
    - name: 初始化编译环境 
      run: |
        git config --global user.name  "yuanqiongyoukong"
        git config --global user.email  "413722718@qq.com" 
        sudo apt update && sudo apt upgrade -y && sudo apt install -y python3 git curl
        curl -o ~/repo https://storage.googleapis.com/git-repo-downloads/repo 
        chmod a+x ~/repo 
        sudo mv ~/repo /usr/local/bin/repo
        
    - name: 拉取内核清单
      run: |
        mkdir -p kernel_workspace
        cd kernel_workspace 
        
        # 仅当缓存未命中时重新初始化
        if [[ ! -d .repo ]]; then 
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git  -b refs/heads/oneplus/${CPU} -m ${FEIL}.xml --depth=1 
        fi
        
        repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
        
        if [ ! -d "AnyKernel3" ]; then 
          git clone https://github.com/Kernel-SU/AnyKernel3  --depth=1
          rm -rf ./AnyKernel3/.git
        fi 
        
        if [ ! -d "kernelsu_patch" ]; then
          git clone https://github.com/yuanqiongyoukong/kernelsu_patch.git  --depth 1
        fi 
        
        cd kernel_platform 
        rm -f ./common/android/abi_gki_protected_exports_* ./msm-kernel/android/abi_gki_protected_exports_* 2>/dev/null || true
        sed -i 's/ -dirty//g' ./common/scripts/setlocalversion ./msm-kernel/scripts/setlocalversion ./external/dtc/scripts/setlocalversion 
        sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' ./common/scripts/setlocalversion
        
        if [ -n "${{ github.event.inputs.KERNEL_NAME  }}" ]; then 
          sed -i '$s|echo "\$res"|echo "-${{ github.event.inputs.KERNEL_NAME  }}"|' ./common/scripts/setlocalversion
        fi 
        
    - name: 设置 KernelSU
      id: set-ksu
      if: github.event.inputs.KSU  == 'true'
      run: |
        cd kernel_workspace/kernel_platform
        
        # 根据类型设置分支
        if [ "${{ github.event.inputs.KSU_VERSION  }}" == "ksu" ]; then 
          if [[ "${{ github.event.inputs.BRANCH_CONFIG  }}" == "tag" ]]; then 
            branch=""
          else
            branch="-s main"
          fi 
        elif [ "${{ github.event.inputs.KSU_VERSION  }}" == "mksu" ]; then 
          branch=""
        elif [ "${{ github.event.inputs.KSU_VERSION  }}" == "rksu" ]; then 
          if [[ "${{ github.event.inputs.SUSFS  }}" == "true" ]]; then 
            branch="-s susfs-v1.5.7"
          else 
            branch="-s main"
          fi
        fi 
        
        # 设置 KernelSU
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh"  | bash $branch
        
        # 计算并设置版本号 
        cd KernelSU
        KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
        sed -i "s/DKSU_VERSION=16/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile 
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_OUTPUT 
        
    - name: 上传源码缓存
      uses: actions/upload-artifact@v4
      with:
        name: kernel-sources-${{ github.run_id  }}
        path: kernel_workspace 
        retention-days: 1 
      continue-on-error: true 
 
  build:
    needs: prepare 
    runs-on: ubuntu-latest
    steps:
    - name: 下载源码缓存
      uses: actions/download-artifact@v4 
      with:
        name: kernel-sources-${{ github.run_id  }}
        path: kernel_workspace





name: 超高速内核构建 - 2025优化版 
on:
  workflow_dispatch:
    inputs:
      KSU: 
        description: "启用 KernelSU"
        required: true 
        type: boolean 
        default: true 
      KSU_VERSION:
        description: "KernelSU 版本"
        required: true 
        type: choice 
        options: [ksu, mksu, rksu]
      BRANCH_CONFIG:
        description: "分支配置"
        required: false 
        type: choice 
        options: [tag, main]
      SUSFS: 
        description: "启用 SUSFS"
        required: true 
        type: boolean
        default: true 
      HIDE: 
        description: "启用隐藏补丁"
        required: true 
        type: boolean 
        default: true 
      VFS: 
        description: "启用手动钩子"
        required: true 
        type: boolean 
        default: true 
      KERNEL_NAME:
        description: "自定义内核名"
        required: false 
        default: ''
 
env:
  CPU: sm8550
  FEIL: oneplus_ace3_v 
  CPUD: kalama
  ANDROID_VERSION: android13 
  KERNEL_VERSION: 5.15
  SSD_CACHE: /mnt/ssd-cache  # SSD加速缓存路径 
 
jobs:
  prepare:
    runs-on: ubuntu-latest 
    outputs:
      ksu_version: ${{ steps.set-ksu.outputs.KSUVER  }}
    steps:
    - name:  挂载SSD加速盘 
      run: |
        sudo mkdir -p ${{ env.SSD_CACHE }}
        sudo mount -t tmpfs -o size=8G tmpfs ${{ env.SSD_CACHE }}
        echo "GIT_TEMPLATE_DIR=${{ env.SSD_CACHE }}/git-template" >> $GITHUB_ENV
        mkdir -p ${{ env.SSD_CACHE }}/git-template/hooks
        
    - name: 🔍 智能缓存.repo
      id: repo-cache 
      uses: actions/cache@v3 
      with:
        path: |
          kernel_workspace/.repo
          kernel_workspace/kernelsu_patch
        key: ${{ runner.os  }}-repo-${{ env.CPU }}-${{ hashFiles('.github/kernel_versions') }}-${{ inputs.KSU_VERSION }}
        restore-keys: |
          ${{ runner.os  }}-repo-${{ env.CPU }}-
          
    - name:  极速初始化 
      run: |
        # SSD加速配置 
        git config --global uploadpack.allowFilter  true 
        git config --global core.preloadIndex  true
        git config --global core.fscache  true 
        git config --global pack.threads  $(nproc)
        
        # 基础环境
        sudo apt install -y python3 git-core curl make gcc binutils --no-install-recommends 
        
        # 仅当缓存未命中时初始化
        if [[ ! -f /usr/local/bin/repo ]]; then
          curl -Lo /usr/local/bin/repo https://mirror.iscas.ac.cn/git-repo/repo 
          chmod a+x /usr/local/bin/repo
        fi 
 
    - name: 📥 增量同步内核 
      run: |
        mkdir -p kernel_workspace 
        cd kernel_workspace
        
        # 智能增量同步
        repo init -u https://mirror.iscas.ac.cn/AOSP/kernel/manifest  \
          -b refs/heads/oneplus/${CPU} \
          -m ${FEIL}.xml \
          --depth=1 \
          --repo-url=https://mirror.iscas.ac.cn/git-repo  
        
        repo sync -c -j$(nproc) \
          --no-tags \
          --no-clone-bundle \
          --optimized-fetch \
          --prune \
          --force-sync
        
        # 按需克隆组件
        if [[ ! -d AnyKernel3 && '${{ inputs.KSU }}' == 'true' ]]; then 
          git clone https://ghproxy.com/https://github.com/Kernel-SU/AnyKernel3  --depth=1
        fi 
        
    - name:  ⚙️ 设置 KernelSU
      id: set-ksu
      if: ${{ inputs.KSU == 'true' }}
      run: |
        cd kernel_workspace/kernel_platform
        
        # 动态分支选择
        case "${{ inputs.KSU_VERSION }}" in
          ksu) branch="${{ inputs.BRANCH_CONFIG == 'tag' && '' || '-s main' }}" ;;
          mksu) branch="" ;;
          rksu) branch="${{ inputs.SUSFS == 'true' && '-s susfs-v1.5.7' || '-s main' }}" ;;
        esac 
        
        # 云端执行避免本地开销 
        curl -LSs "https://kernelsu.cc/setup.sh"  | bash ${branch}
        
        # 版本号生成 
        cd KernelSU
        KSUVER=$(expr $(git rev-list --count HEAD) + 10200)
        sed -i "s/DKSU_VERSION=16/DKSU_VERSION=${KSUVER}/" kernel/Makefile 
        
        # 输出结果
        echo "KSUVER=${KSUVER}" >> $GITHUB_OUTPUT 
        echo "KSUVER=${KSUVER}" >> $GITHUB_ENV
 
  build:
    needs: prepare
    runs-on: ubuntu-latest 
    env:
      BUILD_THREADS: ${{ matrix.threads  }}
    strategy:
      matrix:
        threads: [16, 32]  # 动态线程分配 
        
    steps:
    - name:  🔄 继承SSD缓存 
      run: |
        sudo mkdir -p ${{ env.SSD_CACHE }}
        sudo mount -t tmpfs -o size=8G tmpfs ${{ env.SSD_CACHE }}
        echo "GIT_TEMPLATE_DIR=${{ env.SSD_CACHE }}/git-template" >> $GITHUB_ENV 
        
    - name:  📦 按需加载SUSFS 
      if: ${{ inputs.SUSFS == 'true' }}
      run: |
        cd kernel_workspace
        if [ ! -d "susfs4ksu" ]; then
          git clone https://gitlab.com/simonpunk/susfs4ksu.git  \
            -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }} \
            --depth 1 \
            --single-branch
        fi 
        
    - name:  ⚡ 并行应用补丁 
      run: |
        cd kernel_workspace/kernel_platform
        declare -A patch_map=(
          [susfs]="${{ inputs.SUSFS == 'true' }}"
          [hide]="${{ inputs.HIDE == 'true' }}"
          [vfs]="${{ inputs.VFS == 'true' }}"
        )
        
        # 并行补丁引擎 
        for patch_type in "${!patch_map[@]}"; do 
          if [[ "${patch_map[$patch_type]}" == "true" ]]; then 
            (
              source ${GITHUB_WORKSPACE}/.github/patch_${patch_type}.sh
            ) &
          fi 
        done
        wait  # 等待所有后台任务
        
    - name:  🔧 动态生成配置
      shell: bash 
      run: |
        cd kernel_workspace/kernel_platform
        python3 <<EOF 
        import os 
        config_path = "common/arch/arm64/configs/gki_defconfig"
        
        with open(config_path, "a") as f:
          f.write("\n#  ===== 动态配置 =====\n")
          if "${{ inputs.KSU }}" == "true":
            f.write("CONFIG_KSU=y\n") 
          
          # SUSFS配置逻辑 
          if "${{ inputs.SUSFS }}" == "true":
            f.write("CONFIG_KSU_SUSFS=y\n") 
            if "${{ inputs.VFS }}" == "true":
              f.write("CONFIG_KSU_SUSFS_SUS_SU=n\n") 
            else:
              f.write("CONFIG_KPROBES=y\nCONFIG_KSU_SUSFS_SUS_SU=y\n") 
            
            # 版本特定配置
            if "${{ inputs.KSU_VERSION }}" == "ksu":
              f.write("CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y\n") 
            else:
              f.write("CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n\n") 
            
            # 通用SUSFS配置 
            susfs_configs = [
              "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT",
              "CONFIG_KSU_SUSFS_SUS_PATH",
              "CONFIG_KSU_SUSFS_SUS_MOUNT",
              "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT",
              "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT",
              "CONFIG_KSU_SUSFS_SUS_KSTAT",
              "CONFIG_KSU_SUSFS_TRY_UMOUNT",
              "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT",
              "CONFIG_KSU_SUSFS_SPOOF_UNAME",
              "CONFIG_KSU_SUSFS_ENABLE_LOG",
              "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS",
              "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG",
              "CONFIG_KSU_SUSFS_OPEN_REDIRECT"
            ]
            f.write("\n".join(susfs_configs)  + "\n")
        EOF
        
    - name:  🏗️ 并行编译内核
      timeout-minutes: 25 
      run: |
        cd kernel_workspace
        # 动态线程分配 
        THREADS=$(( (${BUILD_THREADS} > $(nproc)) ? $(nproc) : ${BUILD_THREADS} ))
        
        # 增量编译模式 
        LTO=thin \
        SYSTEM_DLKM_RE_SIGN=0 \
        BUILD_SYSTEM_DLKM=0 \
        KMI_SYMBOL_LIST_STRICT_MODE=0 \
        KERNEL_MODULES_SYNC=n \
        ./kernel_platform/oplus/build/oplus_build_kernel.sh  ${CPUD} gki -j${THREADS}
        
    - name:  📦 智能打包AnyKernel 
      run: |
        cd kernel_workspace 
        mkdir -p artifact 
        
        # 动态生成文件名 
        FEIL_CLEAN=${FEIL%_v}
        FEIL_CLEAN=${FEIL_CLEAN%_u}
        VFS_FLAG=${{ inputs.VFS && '_VFS' || '' }}
        TIMESTAMP=$(date +"%Y%m%d-%H%M")
        
        # 移动内核映像 
        cp kernel_platform/out/msm-kernel-${CPUD}-gki/gki_kernel/dist/Image AnyKernel3/
        
        # 生成元数据
        echo "KSU_VERSION=${{ inputs.KSU_VERSION }}" > AnyKernel3/build.info  
        echo "KSU_VER=${{ needs.prepare.outputs.ksu_version  }}" >> AnyKernel3/build.info  
        echo "BUILD_TIME=${TIMESTAMP}" >> AnyKernel3/build.info  
        
        # 创建压缩包
        zip -r0 artifact/AnyKernel3_${FEIL_CLEAN}_${TIMESTAMP}.zip AnyKernel3/*
        
    - name:  🚢 高速上传成品 
      uses: actions/upload-artifact@v4 
      with:
        name: Kernel_${{ inputs.KSU_VERSION }}_${{ needs.prepare.outputs.ksu_version  }}_${{ env.FEIL }}
        path: kernel_workspace/artifact/*.zip 
        compression-level: 0  # 禁用压缩 
        retention-days: 7 
