name: 构建KernelSU-Next 
 
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "设备处理器型号"
        required: true 
        default: 'sm8550'
      FEIL:
        description: "配置文件名称"
        required: true 
        default: 'oneplus_12r_v'
      CPUD:
        description: "处理器代号"
        required: true 
        default: 'kalama'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true 
        default: 'android13'
      KERNEL_VERSION:
        description: "内核版本"
        required: true 
        default: '5.15'
 
env:
  GIT_USER_NAME: yuanqiongyoukong 
  GIT_USER_EMAIL: 413722718@qq.com  
  KERNEL_MANIFEST_URL: https://github.com/OnePlusOSS/kernel_manifest.git  
  KERNELSU_URL: https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh  
  SUSFS_REPO: https://gitlab.com/simonpunk/susfs4ksu.git  
  PATCHES_REPO: https://github.com/TheWildJames/kernel_patches.git  
  ANYKERNEL3_REPO: https://github.com/Kernel-SU/AnyKernel3  
  KSU_DIR: KernelSU-Next 
  WORK_DIR: kernel_workspace 
  PLAT_DIR: kernel_platform 
  BUILD_KERNEL: oplus/build/oplus_build_kernel.sh  
  UP_AK3: kernel_workspace/AnyKernel3 
  UP_IMG: kernel_workspace/out/dist/Image 
 
jobs:
  build:
    runs-on: ubuntu-latest 
    
    steps:
    - name: 最大化构建空间 
      uses: easimon/maximize-build-space@master 
      with:
        root-reserve-mb: 8192 
        temp-reserve-mb: 2048 
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
 
    - name: 初始化编译环境 
      run: |
        # 配置Git用户信息 
        git config --global user.name  "${GIT_USER_NAME}"
        git config --global user.email  "${GIT_USER_EMAIL}"
        
        # 更新系统包并安装必要的工具 
        sudo apt update && sudo apt install -y python3 git curl gcc make 
        
        # 安装Repo工具 
        curl -o ~/repo https://storage.googleapis.com/git-repo-downloads/repo  
        chmod a+x ~/repo 
        sudo mv ~/repo /usr/local/bin/repo 
 
    - name: 拉取内核清单 
      description: 初始化并同步内核代码仓库 
      run: |
        # 创建工作目录并进入 
        mkdir -p ${{env.WORK_DIR}} && cd ${{env.WORK_DIR}}
        
        # 初始化内核仓库 
        repo init -u ${{env.KERNEL_MANIFEST_URL}} \
                  -b refs/heads/oneplus/${{github.event.inputs.CPU}}  \
                  -m ${{github.event.inputs.FEIL}}.xml  \
                  --depth=1 \
                  --single-branch \
                  --reference-only 
        
        # 同步代码仓库 
        repo sync -j$(nproc --all) \
                  --current-branch \
                  --no-tags \
                  --optimized-fetch \
                  --prune-empty-dirs \
                  --force-broken-repos 
        
        # 删除不必要的文件 
        rm -f common/android/abi_gki_protected_exports_* \
              msm-kernel/android/abi_gki_protected_exports_* \
              2>/dev/null || echo "No protected exports found!"
        
        # 修改版本控制脚本 
        sed -i 's/ -dirty//g' ${{env.PLAT_DIR}}/common/scripts/setlocalversion \
              ${{env.PLAT_DIR}}/msm-kernel/scripts/setlocalversion 
        
        # 启用ThinLTO优化 
        sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/Ig' \
              ${{env.PLAT_DIR}}/oplus/build/oplus_setup.sh  
        sed -i 's/local default_value=none/local default_value=thin/Ig' \
              ${{env.PLAT_DIR}}/oplus/build/oplus_setup.sh  
        sed -i 's/local default_value=enable/local default_value=disable/Ig' \
              ${{env.PLAT_DIR}}/oplus/build/oplus_setup.sh  
 
    - name: 检查内核清单同步状态 
      if: always()
      run: |
        if [ $? -ne 0 ]; then 
          echo "内核清单同步失败，请检查网络连接或仓库地址。"
          exit 1 
        fi 
 
    - name: 设置 KernelSU 
      run: |
        # 进入工作目录 
        cd ${{env.WORK_DIR}}/${{env.PLAT_DIR}}/common 
        
        # 下载并执行KernelSU脚本 
        curl -LSs ${{env.KERNELSU_URL}} > setup.sh  
        bash setup.sh  next 
        
        # 进入KernelSU目录 
        cd ${KSU_DIR}
        
        # 获取KernelSU版本号 
        KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV 
        
        # 更新Makefile中的版本号 
        sed -i "s/DKSU_VERSION=16/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile 
 
    - name: 检查KernelSU下载状态 
      if: always()
      run: |
        if [ $? -ne 0 ]; then 
          echo "下载KernelSU脚本失败，请检查网络连接或脚本地址。"
          exit 1 
        fi 
 
    - name: 添加 SUSFS 
      run: |
        # 进入工作目录 
        cd ${{env.WORK_DIR}}
        
        # 克隆SUSFS和补丁仓库 
        git clone ${{env.SUSFS_REPO}} -b gki-${{github.event.inputs.ANDROID_VERSION}}-${{github.event.inputs.KERNEL_VERSION}} 
        git clone ${{env.PATCHES_REPO}}
        
        # 进入平台目录 
        cd ${{env.PLAT_DIR}}
        
        # 应用补丁文件 
        cp ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch  \
           ./common/${KSU_DIR}/ && \
           patch -p1 --forward < ./common/${KSU_DIR}/10_enable_susfs_for_ksu.patch  || true 
        
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{github.event.inputs.ANDROID_VERSION}}-${{github.event.inputs.KERNEL_VERSION}}.patch  \
           ./common/ && \
           patch -p1 < ./common/50_add_susfs_in_gki-${{github.event.inputs.ANDROID_VERSION}}-${{github.event.inputs.KERNEL_VERSION}}.patch  || true 
        
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        
        # 应用其他补丁 
        cp ../../kernel_patches/69_hide_stuff.patch  ./
        patch -p1 -F 3 < 69_hide_stuff.patch  
        
        cp ../../kernel_patches/apk_sign.c_fix.patch  ./
        patch -p1 -F 3 < apk_sign.c_fix.patch  
        
        cp ../../kernel_patches/core_hook.c_fix.patch  ./
        patch -p1 --fuzz=3 < core_hook.c_fix.patch  
        
        cp ../../kernel_patches/selinux.c_fix.patch  ./
        patch -p1 -F 3 < selinux.c_fix.patch  
 
    - name: 检查SUSFS应用状态 
      if: always()
      run: |
        if [ $? -ne 0 ]; then 
          echo "应用SUSFS补丁失败，请检查补丁文件或代码兼容性。"
          exit 1 
        fi 
 
    - name: 编译内核 
      run: |
        # 进入工作目录 
        cd ${{env.WORK_DIR}}
        
        # 执行编译脚本 
        echo "开始编译内核..."
        date +"%Y-%m-%d %H:%M:%S"
        
        ./${{env.BUILD_KERNEL}} ${{github.event.inputs.CPUD}}  gki 
        
        if [ $? -ne 0 ]; then 
          echo "编译失败，请检查编译日志。"
          exit 1 
        fi 
        
        echo "编译完成！"
        date +"%Y-%m-%d %H:%M:%S"
 
    - name: 制作 AnyKernel3 
      run: |
        # 克隆AnyKernel3仓库 
        git clone ${{env.ANYKERNEL3_REPO}} --depth=1 
        
        # 清理不必要的文件 
        rm -rf ./AnyKernel3/.git ./AnyKernel3/LICENSE 
        
        # 复制编译好的Image文件 
        cp ./out/dist/Image ./AnyKernel3/
 
    - name: 检查AnyKernel3制作状态 
      if: always()
      run: |
        if [ $? -ne 0 ]; then 
          echo "制作AnyKernel3包失败，请检查编译结果或文件路径。"
          exit 1 
        fi 
 
    - name: 上传 AnyKernel3 包 
      uses: actions/upload-artifact@v4 
      with:
        name: AnyKernel3-${{env.KSU_DIR}}_${{github.event.inputs.FEIL}} 
        path: ${{env.UP_AK3}}
 
    - name: 上传 Image 文件 
      uses: actions/upload-artifact@v4 
      with:
        name: Image-${{env.KSU_DIR}}_${{github.event.inputs.FEIL}} 
        path: ${{env.UP_IMG}}
