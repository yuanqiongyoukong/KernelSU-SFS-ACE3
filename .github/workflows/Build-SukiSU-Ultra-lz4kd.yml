name: Build SukiSU Ultra lz4kd
on:
  workflow_dispatch:
    inputs:
      CPU:
        type: choice
        description: "分支"
        required: true
        default: sm8550
        options:
          - sm7550
          - sm7675
          - sm8450
          - sm8475
          - sm8550
          - sm8650
          - sm8750
      FEIL:
        type: choice
        description: "配置文件"
        required: true
        default: oneplus_ace2pro_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_ace5_pro
          - oneplus_13t
          - GitHub有bug可能不显示最后一项,误使用此项
      CPUD:
        type: choice
        description: "处理器代号"
        required: true
        default: kalama
        options:
          - crow
          - waipio
          - kalama
          - pineapple
          - sun
      ANDROID_VERSION:
        type: choice
        description: "内核安卓版本"
        required: true
        default: android13
        options:
          - android12
          - android13
          - android14
          - android15
      KERNEL_VERSION:
       type: choice
       description: "内核版本"
       required: true
       default: "5.15"
       options:
         - "5.10"
         - "5.15"
         - "6.1"
         - "6.6"
      BUILD_METHOD:
        type: choice
        description: "编译方式"
        required: true
        default: gki
        options:
          - gki
          - perf
      VFS:
        type: boolean
        description: "是否启用手动钩子？"
        required: true
        default: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "FurLC"
          git config --global user.email "qq441791056@163.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl

      - name: Show selected inputs debug
        run: |
          echo "Selected CPU: ${{ github.event.inputs.CPU }}"
          echo "Selected FEIL: ${{ github.event.inputs.FEIL }}"
          echo "Selected CPUD: ${{ github.event.inputs.CPUD }}"
          echo "Selected ANDROID_VERSION: ${{ github.event.inputs.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ github.event.inputs.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ github.event.inputs.BUILD_METHOD }}"
          echo "Selected VFS: ${{ github.event.inputs.VFS }}"

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          sed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/external/dtc/scripts/setlocalversion

      # 添加 SukiSU Ultra
      - name: Add KernelSU-SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Set up susfs
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

          #susfs
          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          #lz4k
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          
          # Apply patches
          cd ./common

          sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
          sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
          
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          echo "完成"

      - name: Apply lz4kd Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true

      - name: Add SUSFS Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add VFS configuration settings
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi

          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          # echo "CONFIG_CRYPTO_ZSTD=m" >> ./common/arch/arm64/configs/gki_defconfig

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Add make name
        run: |
         cd kernel_workspace/kernel_platform
           if [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" || "${{ github.event.inputs.KERNEL_VERSION }}" == "6.6" ]]; then
             sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
           fi
           sed -i '$s|echo "\$res"|echo "\${{ github.event.inputs.KERNEL_NAME }}"|' ./common/scripts/setlocalversion

      - name: Build kernel
        run: |
          cd kernel_workspace
          export BAZEL_BUILD_ARGS="--jobs=2 --local_ram_resources=6000 --local_cpu_resources=2"
          # if [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "5.15" ]]; then
          #   cd kernel_platform
          #   tools/bazel run --config=fast --config=local --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
          # elif [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" ]]; then
          #   cd kernel_platform
          #   tools/bazel run --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
          # else
          if [ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" ]; then
            ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          else
            LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          fi

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-no_kpm --depth=1
          git clone https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-kpm --depth=1
          rm -rf AnyKernel3-{kpm,no_kpm}/.git
          rm -f AnyKernel3-{kpm,no_kpm}/push.sh
          dir1="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          dir2="kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree/"
          dir3="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          dir4="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          dir5="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          target1="./AnyKernel3-no_kpm/"
          target2="./kernel_workspace/kernel"

          if find "$dir1" -name "Image" | grep -q "Image"; then
            image_path="$dir1"Image
          elif find "$dir2" -name "Image" | grep -q "Image"; then
            image_path="$dir2"Image
          elif find "$dir3" -name "Image" | grep -q "Image"; then
            image_path="$dir3"Image
          elif find "$dir4" -name "Image" | grep -q "Image"; then
            image_path="$dir4"Image
          elif find "$dir5" -name "Image" | grep -q "Image"; then
            image_path="$dir5"Image
          else
            image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          fi

          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            mkdir -p "$dir1"
            if [ "$(realpath "$image_path")" != "$(realpath "$dir1"Image)" ]; then
              cp "$image_path" "$dir1"
            else
              echo "源文件与目标相同，跳过复制"
            fi
            cp "$dir1"Image ./AnyKernel3-no_kpm/Image
            echo "IMAGE_PATH=$image_path" >> $GITHUB_ENV
          else
            echo "未找到 Image 文件，构建可能失败"
            exit 1
          fi
          
      - name: Apply KPM configs
        run: |
          echo "使用的 Image 路径是: $IMAGE_PATH"
          cd "$(dirname "$IMAGE_PATH")"
          cp Image $GITHUB_WORKSPACE/AnyKernel3-no_kpm/Image
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3-kpm/Image
          cp Image $GITHUB_WORKSPACE/kernel_workspace/kernel

      - name: Find crypto_zstdn.ko
        run: |
          find -name *.ko

      - name: Locate crypto_zstdn.ko
        if: ${{ github.event.inputs.KERNEL_VERSION == '5.10' || github.event.inputs.KERNEL_VERSION == '5.15' }}
        run: |
          git clone https://github.com/FurLC/ZRAM-Module.git --depth=1
          rm -rf ZRAM-Module/.git
          rm -f ZRAM-Module/README.md
          zram1="./kernel_workspace/device/qcom/${{ github.event.inputs.CPUD }}-kernel/vendor_dlkm/"
          zram2="./kernel_workspace/out/staging/lib/modules/"
          zram3="./kernel_workspace/out/staging/vendor_dlkm_staging/lib/modules/"
          zram4="./kernel_workspace/out/dist/"
          zram5="./kernel_workspace/out/msm-kernel/mm/oplus_mm/hybridswap_zram/zstd/"
          zram6="./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/staging/lib/modules/"
          zram7="./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/staging/vendor_dlkm_staging/lib/modules/"
          zram8="./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
          zram9="./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/msm-kernel/mm/oplus_mm/hybridswap_zram/zstd/"
          target="./ZRAM-Module/ZRAM/"

          if find "$zram1" -name "crypto_zstdn.ko" | grep -q "crypto_zstdn.ko"; then
            zram_path=$(find "$zram1" -name "crypto_zstdn.ko" | head -n 1)
          elif find "$zram2" -name "crypto_zstdn.ko" | grep -q "crypto_zstdn.ko"; then
            zram_path=$(find "$zram2" -name "crypto_zstdn.ko" | head -n 1)
          elif find "$zram3" -name "crypto_zstdn.ko" | grep -q "crypto_zstdn.ko"; then
            zram_path=$(find "$zram3" -name "crypto_zstdn.ko" | head -n 1)
          elif find "$zram4" -name "crypto_zstdn.ko" | grep -q "crypto_zstdn.ko"; then
            zram_path=$(find "$zram4" -name "crypto_zstdn.ko" | head -n 1)
          elif find "$zram5" -name "crypto_zstdn.ko" | grep -q "crypto_zstdn.ko"; then
            zram_path=$(find "$zram5" -name "crypto_zstdn.ko" | head -n 1)
          elif find "$zram6" -name "crypto_zstdn.ko" | grep -q "crypto_zstdn.ko"; then
            zram_path=$(find "$zram6" -name "crypto_zstdn.ko" | head -n 1)
          elif find "$zram7" -name "crypto_zstdn.ko" | grep -q "crypto_zstdn.ko"; then
            zram_path=$(find "$zram7" -name "crypto_zstdn.ko" | head -n 1)
          elif find "$zram8" -name "crypto_zstdn.ko" | grep -q "crypto_zstdn.ko"; then
            zram_path=$(find "$zram8" -name "crypto_zstdn.ko" | head -n 1)
          elif find "$zram9" -name "crypto_zstdn.ko" | grep -q "crypto_zstdn.ko"; then
            zram_path=$(find "$zram9" -name "crypto_zstdn.ko" | head -n 1)
          else
            zram_path=$(find "./kernel_workspace" -name "crypto_zstdn.ko" | head -n 1)
          fi

          if [ -n "$zram_path" ] && [ -f "$zram_path" ]; then
            mkdir -p "$zram1"
            if [ "$(realpath "$zram_path")" != "$(realpath "$zram1"crypto_zstdn.ko)" ]; then
              cp "$zram_path" "$zram1"
            else
              echo "源文件与目标相同，跳过复制"
            fi
            cp "$zram1"crypto_zstdn.ko ./ZRAM-Module/ZRAM/zram.ko
          else
            echo "未找到 crypto_zstdn.ko 文件，构建可能失败"
            exit 1
          fi

      - name: Locate ZRAM-related ko files for 6.1 and 6.6 kernels
        if: ${{ github.event.inputs.KERNEL_VERSION == '6.1' || github.event.inputs.KERNEL_VERSION == '6.6' }}
        run: |
          git clone https://github.com/FurLC/ZRAM-Module.git --depth=1
          rm -rf ZRAM-Module/.git
          rm -f ZRAM-Module/README.md
          zram1="./kernel_workspace/kernel_platform/out/msm-kernel-pineapple-gki/dist/"
          zram2="./kernel_workspace/kernel_platform/out/vendor/oplus/kernel/mm/"
          zram3="./kernel_workspace/kernel_platform/out/dist/"
          zram4="./kernel_workspace/device/qcom/pineapple-kernel/vendor_dlkm/"
          zram5="./kernel_workspace/device/qcom/pineapple-kernel/system_dlkm/lib/modules/6.1.75/kernel/drivers/block/zram/"
          zram6="./kernel_workspace/device/qcom/pineapple-kernel/system_dlkm/flatten/lib/modules/"
          zram7="./kernel_workspace/kernel_platform/out/msm-kernel-pineapple-gki/msm-kernel/mm/oplus_mm/hybridswap_zram/"
          zram8="./kernel_workspace/kernel_platform/out/msm-kernel-pineapple-gki/msm-kernel/mm/oplus_bsp_hybridswap_zram/"
          target="./ZRAM-Module/ZRAM/"

          if find "$zram1" -name "*zram*.ko" | grep -q "zram"; then
            zram_path=$(find "$zram1" -name "*zram*.ko" | head -n 1)
          elif find "$zram2" -name "*zram*.ko" | grep -q "zram"; then
            zram_path=$(find "$zram2" -name "*zram*.ko" | head -n 1)
          elif find "$zram3" -name "*zram*.ko" | grep -q "zram"; then
            zram_path=$(find "$zram3" -name "*zram*.ko" | head -n 1)
          elif find "$zram4" -name "*zram*.ko" | grep -q "zram"; then
            zram_path=$(find "$zram4" -name "*zram*.ko" | head -n 1)
          elif find "$zram5" -name "*zram*.ko" | grep -q "zram"; then
            zram_path=$(find "$zram5" -name "*zram*.ko" | head -n 1)
          elif find "$zram6" -name "*zram*.ko" | grep -q "zram"; then
            zram_path=$(find "$zram6" -name "*zram*.ko" | head -n 1)
          elif find "$zram7" -name "*zram*.ko" | grep -q "zram"; then
            zram_path=$(find "$zram7" -name "*zram*.ko" | head -n 1)
          elif find "$zram8" -name "*zram*.ko" | grep -q "zram"; then
            zram_path=$(find "$zram8" -name "*zram*.ko" | head -n 1)
          else
            zram_path=$(find "./kernel_workspace" -name "*zram*.ko" | head -n 1)
          fi

          echo "ZRAM module file located at: $zram_path"
          # Copy the located module to target directory
          cp "$zram_path" "$target"

      - name: cp zram.ko
        run: |
          mkdir ZRAM
          cp ./kernel_workspace/out/dist/oplus_bsp_zram_opt.ko ./ZRAM/
          cp ./kernel_workspace/out/dist/oplus_bsp_hybridswap_zram.ko ./ZRAM/
          cp ./kernel_workspace/out/dist/oplus_bsp_zsmalloc.ko ./ZRAM/

      - name: Set suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.VFS == 'true' && '_VFS' || '' }}" >> $GITHUB_OUTPUT

      - name: Remove _uv suffix from FEIL
        id: feil_clean
        run: |
          clean_feil="${{ github.event.inputs.FEIL }}"
          clean_feil="${clean_feil%_v}"  # 去掉结尾的 _v（如果有）
          clean_feil="${clean_feil%_u}"  # 去掉结尾的 _u（如果有）
          echo "value=$clean_feil" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3 (no_KPM)
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}_NoKPM_LZ4K
          path: AnyKernel3-no_kpm/*

      - name: Upload AnyKernel3 (KPM)
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}_KPM_LZ4K
          path: AnyKernel3-kpm/*

      - name: Upload ZRAM-Module
        uses: actions/upload-artifact@v4
        with:
          name: ZRAM-Module_${{ github.event.inputs.KERNEL_VERSION }}_${{ steps.feil_clean.outputs.value }}
          path: ZRAM-Module/*

      - name: Upload ZRAM.ko
        uses: actions/upload-artifact@v4
        with:
          name: ZRAM.ko_${{ github.event.inputs.KERNEL_VERSION }}_${{ steps.feil_clean.outputs.value }}
          path: ZRAM/*
